HW T 10 1 



import random
import time
import matplotlib.pyplot as plt

# Реалізація рандомізованого QuickSort
def randomized_quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = random.choice(arr)
    less = [x for x in arr if x < pivot]
    equal = [x for x in arr if x == pivot]
    greater = [x for x in arr if x > pivot]
    return randomized_quick_sort(less) + equal + randomized_quick_sort(greater)

# Реалізація детермінованого QuickSort (pivot - перший елемент)
def deterministic_quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    less = [x for x in arr if x < pivot]
    equal = [x for x in arr if x == pivot]
    greater = [x for x in arr if x > pivot]
    return deterministic_quick_sort(less) + equal + deterministic_quick_sort(greater)

# Функція для вимірювання часу виконання алгоритмів
def measure_time(sort_func, arr):
    start_time = time.time()
    sort_func(arr.copy())
    end_time = time.time()
    return end_time - start_time

# Розміри масивів для тестування
sizes = [10_000, 50_000, 100_000, 500_000]

# Вимірювання середнього часу виконання
randomized_times = []
deterministic_times = []

for size in sizes:
    random_arr = [random.randint(0, 1_000_000) for _ in range(size)]
    random_time = sum(measure_time(randomized_quick_sort, random_arr) for _ in range(5)) / 5
    deterministic_time = sum(measure_time(deterministic_quick_sort, random_arr) for _ in range(5)) / 5

    randomized_times.append(random_time)
    deterministic_times.append(deterministic_time)

    print(f"Розмір масиву: {size}")
    print(f"  Рандомізований QuickSort: {random_time:.4f} секунд")
    print(f"  Детермінований QuickSort: {deterministic_time:.4f} секунд\n")

# Побудова графіку
plt.plot(sizes, randomized_times, label='Рандомізований QuickSort')
plt.plot(sizes, deterministic_times, label='Детермінований QuickSort')

plt.title("Порівняння рандомізованого та детермінованого QuickSort")
plt.xlabel("Розмір масиву")
plt.ylabel("Середній час виконання (секунди)")
plt.legend()
plt.grid(True)
plt.show()





Розмір масиву: 10000
  Рандомізований QuickSort: 0.0609 секунд
  Детермінований QuickSort: 0.0675 секунд

Розмір масиву: 50000
  Рандомізований QuickSort: 0.7765 секунд
  Детермінований QuickSort: 0.5208 секунд

Розмір масиву: 100000
  Рандомізований QuickSort: 0.8658 секунд
  Детермінований QuickSort: 0.4483 секунд

Розмір масиву: 500000
  Рандомізований QuickSort: 3.0466 секунд
  Детермінований QuickSort: 2.1885 секунд



Аналіз результатів: Швидкість виконання:

Зі зростанням розміру масиву час сортування обох алгоритмів зростає приблизно лінійно. Проте рандомізований QuickSort показує трохи менший час виконання порівняно з детермінованим QuickSort.

Порівняльна ефективність:

Рандомізований QuickSort загалом більш ефективний за детермінований варіант, особливо для великих наборів даних (наприклад, 500,000 елементів). Це пов’язано з тим, що випадковий вибір опорного елемента знижує ймовірність потрапляння в найгірший випадок (наприклад, вже частково відсортований масив).

Висновок: Рандомізований QuickSort має перевагу над детермінованим через стабільніше уникнення поганих випадків вибору опорного елемента.

Для великих масивів виграш у часі помітний та може стати істотним у реальних задачах.

Рекомендація: Для задач, де важлива стабільна продуктивність із великою кількістю даних, доцільніше використовувати саме рандомізований QuickSort.
Ось результати виконання вашого коду у форматі, що відповідає критеріям прийняття завдання:

### Таблиця порівняння середнього часу виконання:

| Розмір масиву | Рандомізований QuickSort (секунд) | Детермінований QuickSort (секунд) |
| ------------- | --------------------------------- | --------------------------------- |
| 10,000        | 0.0609                            | 0.0675                            |
| 50,000        | 0.7765                            | 0.5208                            |
| 100,000       | 0.8658                            | 0.4483                            |
| 500,000       | 3.0466                            | 2.1885                            |

---

### Графік результатів:

Було побудовано графік із підписами осей та легендою, що наочно демонструє динаміку зміни часу виконання обох алгоритмів QuickSort залежно від розміру вхідних масивів.

---

### Аналіз результатів та висновки щодо ефективності:

#### Швидкість виконання:

* Час виконання як рандомізованого, так і детермінованого алгоритму QuickSort зростає приблизно пропорційно розміру масиву.
* Проте, на тестованих наборах детермінований QuickSort показав кращу швидкість виконання на великих масивах порівняно з рандомізованим.

#### Порівняльна ефективність:

* Всупереч типовим теоретичним очікуванням, у даному експерименті детермінований QuickSort показав стабільно кращі результати на великих обсягах даних.
* Такий результат може бути пов’язаний із характером випадкових даних і специфікою реалізації алгоритму в даному експерименті (вибір першого елемента як опорного виявився ефективнішим за випадковий вибір).

#### Висновок:

* У межах цього конкретного експерименту детермінований QuickSort виявився ефективнішим за рандомізований варіант, демонструючи стабільнішу швидкодію зі збільшенням розміру набору даних.
* Водночас, рандомізований QuickSort все ще може мати переваги в інших випадках, особливо там, де можливий вплив упорядкованості даних.

---

### Рекомендація:

Для випадків із довільними даними та великими масивами, з огляду на проведений експеримент, можна рекомендувати використання детермінованого QuickSort. Однак слід мати на увазі, що в інших ситуаціях (наприклад, при вже частково відсортованих даних) рандомізований QuickSort може показати кращу стабільність та меншу чутливість до специфіки даних.
